C++01 : 

1. C++语言完全兼容C语言的所有 语法特性
    C++是面向对象 的一种编程语言
    C++语言适合大型程序的开发，C语言适合小而精的程序开发

2.  <cstdio> ---> <stdio.h>
     <cstdlib> ---> <stdlib.h>
     <cstring> ---> <string.h>

3.  namespace     名字空间 / 命名空间

C++02 : 

1. 任何 基本类型的数据 都可以 隐式转换( 编译器帮我们转换 ) 为布尔类型
    任何 复合类型的数据 如何转换为布尔类型？？？？？( 第17次课会讲到 )

2. 自定义转换？？？？（第8次课会讲到）

3. 全天下的C++编译器，都会对我们书写的函数进行换名，但是换名规则都不相同

    int sum(int a, int b ) { ... }    

    g++   :    _Z3sumii
    cl.exe :    ?sumYAHHH@Z

C++03 : 

1. 内联函数是编译器的优化策略 

  inline void foo( ) {
       ....
       foo( ); // 如果按照内联处理，编译器 就得将此处替换foo编译后产生的二进制指令集合( 编译器做不到 )
       .... // 还没编译呢
  }

2. 不管是几维数组，最正确分析思路：都当一维数组看
    int a[3];     // a --> int*
    int a[3][4]; // a --> int(*)[4]

3. 异常？？？？（第16次课会讲到）

4.  左值 和 右值

    左值 ：能够取地址  &
    右值 ：不能取地址

5.  注意事项：
 
   常引用 即 万能引用( 可以引用 非常左值、常左值、右值 )
      int a = 10;
      const int& cra = a; // 但是如果 常引用 引用的是 非常左值，通过引用将丧失修改目标内存的权限

    常指针 即 万能指针( 可以指向 非常左值、 常左值、右值 )
      int a = 10;
      const int* cpa = &a; // 但是如果 常指针 指向的是 非常左值，通过常指针将丧失修改目标内存的权限

C++04 : 

1. C语言中 只要涉及到数据传递( 例如: 初始化、赋值、传参、返回值)， 永远都是值传递
    值传递：将数据复制一份给别人.
    void foo( int x ) {...}
    int bar( ) {
        int m=8888;
        return m;
    }
    int main( ) {
          int a = 10; // 初始化
          a = 20; // 赋值
          foo( a ); // 传参
          /*|8888|*/bar( ); // 返回值
    }

2. C/C++语言 标识符 的命名顺序 ( 名字在中间,类型在两边)  ---> 从右到左,从近到远,括号优先

int a;
int a[3];
int a[3][4];
int(*p)[3];  // 数组指针
int*p[3];    // 指针数组
int(*p[3])[4]; // 数组指针数组
int(*p)(int,double); // 函数指针
int(*p[3])(int,double); // 函数指针数组

3. 动态类型转换（15次课会讲）
4. 静态转换的第二个应用场景 - 自定义类型转换规则？？？？？？？（8次课会讲）

5. 
人构成团队
                  调研报告                       需求分析报告                 程序代码                       测试报告
产品经理-------------->需求分析师---------------->程序员--------------->测试人员------------->.....


大型软件（团队）
                 接收的数据                      解压后的数据                  解密后的数据                       处理后的数据               加密后的数据              压缩后的数据
接收对象--------------->解压缩对象---------------->解密对象-------------->处理数据对象-------------->加密对象-------------->压缩对象-------------->发送对象


C++05 : 
1.  C语言处理问题： 分而治之, 面向问题域.    
   a+b*c-d/e+(f*g);
   a-b/c+d*e-(f/g);

2. C++语言处理问题：大处着眼
   a+b*c-d/e+(f*g);
   计算器
   a-b/c+d*e-(f/g);

3. 抽象事物 : 抽取事物的特征。
    类：抽取事物特征的 规则
    类：在代码中落地的时候，其实就是 程序员自己定义的一个复合的数据类型（例如：struct）
           


                                                         （类）规则
   狗--------------------------你------------------------------计算机（内存中建立狗的影像）
                                                           犬种                        藏獒
                                                           犬龄                          2
                                                           体重                         150
                                                           毛色                        黑白花色
                                                           长相                        大脑袋，大耳朵，红鼻子头、毛茸茸大尾巴     

4. 定义XXX，就是给XXX分配内存空间    

5. 哪个对象 调用 成员函数，成员函数的this参数 就指向 哪个对象**********************************    

6.  非常对象 优先选择 非常函数，如果没有非常函数 也可选择 常函数
     常对象  只能 选择 常函数                                              


C++06:

1. 构造函数的作用：定义 对象的 各个成员变量( 造包子馅 )**************************************

2. 对象的状态(值)： 就是这个对象的 每个成员变量的状态(值) 的 集合.


3. string类对象的使用

    string s1("hello"); // 定义s1,利用s1.string("hello") ---> s1维护的字符串为"hello"

    string s2(s1); //= s1; 定义s2,利用s2.string(s1) ---> s2维护的字符串 和 s1维护的字符串 内容相同

    string s3; // 定义s3,利用s3.string() ---> s3维护的字符串为"\0"
    s3 = s2; // s3.operator=(s2) ---> s3维护的字符串 和 s2维护的字符串 内容相同

   string s4 = "hello";  // ---> s4维护的字符串为"hello"

   string s5; // 定义s5,利用s5.string() ---> s5维护的字符串为"\0"
   s5 = "hello";  // --> s5维护的字符串为"hello"

4. 注意事项：
     如果在初始化 并且“=”两边的类型完全一致, =xxx 和 (xxx) 无差别
     如果在赋值 并且"="两边的类型完全一致,将触发 拷贝赋值函数( operator= ) 这个函数的调用
     如果“=”两边的类型不一致,编译器会将 “=”右边数据的类型 转成和 "="左边数据的类型 一致

C++07 : 
    我 和 大家 指定一个协议：
   【..】-  在this指针所指向的内存空间中

      Human h; // 定义h,利用h.Human() --> (无名,0)  
  
      Human h2(22,"张飞"); // 定义h2,利用h2.Human(22,"张飞") --> (张飞,22)

      Human h3(h2); //= h2; 定义h3,利用h3.Human(h2) --> h3维护的数据 和 h2维护的数据 内容相同

      h = h3; // h.operator=(h3) 拷贝赋值函数 --> h维护的数据 和 h3维护的数据 内容相同

C++08 : 
1. 自定义转换 : 当需要做类型转换时，要调用 程序员 提供 类型转换构造函数( 定制转换规则 )

2. 构造函数的作用：定义 对象的 各个成员变量( 造包子馅 )**************************************
    析构函数的作用：销毁 对象的 各个成员变量( 吃包子馅 )**************************************
   
 C++09 :
   C++语言中的 自己设计的类型，尽量和基本类型 拥有一样使用方式。
   
   C语言中   
          前++：先加再用
          后++：先用再加

  C++语言中： 不管 前++ 还是 后++ 都是直接加1 （内部实现和C语言并不同）
                         但是 C++语言 还想使用户感觉 和 C 相同.

class ostream {
public:
      ostream& operator<<(int x) { ... }
      ostream& operator<<(const int x) { ... }
      ostream& operator<<(double x) { ... }
      ostream& operator<<(const double x) { ... }
      ostream& operator<<(short x) { ... }
      ostream& operator<<(const short x) { ... }
      ostream& operator<<(float x) { ... }
      ostream& operator<<(const float x) { ... }
      ostream& operator<<(char x) { ... }
      ....
      ostream& operator<<(Human h) {...} // C++标准中的ostream类中 肯定没有一个形参为Human类型的operator<<函数,
                                                                   // 肯定不会允许我们程序员添加这个函数 
};
ostream cout;
// 以上模拟C++标准库
// --------------------------------
// 以下模拟用户
   int main( ) {
       int a;  double  b;   float c;   short d;   // 非常左值
       const int ca=a;  const double  cb=b;   const float cc=c;   const short cd=c;   // 常左值
       cout << a; // cout.operator<<(a) --> 实参为int
       cout << ca; // cout.operator<<(ca) --> 实参为 const int
       cout << b; // cout.operator<<(b) --> 实参为double
       cout << cb; // cout.operator<<(cb) --> 实参为 const double
       cout << c; // cout.operator<<(c) --> 实参为float
       cout << cc; // cout.operator<<(cc) --> 实参为 const float
       cout << d; // cout.operator<<(d) --> 实参为short
       cout << cd; // cout.operator<<(cd) --> 实参为const short
       cout << '\n'; // cout.operator<<('\n') --> 实参为char
       Human h;
       cout << h; // cout.operator<<(h) --> 实参为Human   或  operator<<(cout, h)

       cin >> a;
       cin >> ca; // error
       cin >> 5; // error
   }	

C++11 : 
  1. C++语言的思想： 对象内部包含了xxx， 就拿这个 对象 当 xxx 来用   

  2. 自定义转换 : 当需要做类型转换时，需要调用 程序员 提供 类型转换构造函数     ( 定制转换规则 )
                          当需要做类型转换时，也可调用 程序员 提供 类型转换操作符函数 （定制转换规则）

C++12 :

   继承最基本的特点:
   (1) 子类对象 内部包含 基类子对象
   (2) 子类内部 可以访问 基类的 非私有(公有/保护)成员(变量/函数)

   公有继承独有的特点：
   (1) 只有公有继承方式下，子类对象在类的外部可以访问基类的公有成员, 其他继承方式不可以
   (2) 只有公有继承方式下，子类类型的指针 或 引用 可以和 基类类型的指针 或 引用 可以进行类型转换 , 其他继承方式不可以


   指针为什么需要类型？   答：指针的类型决定了指针的 眼界（*） 和 步长（+1）

   int  a;       double b;        short c;        char d;

   int* pa;    double*pb;      short*pc;     char*pd;
   pa+1        pb+1                 pc+1            pd+1

C++13 : 
    没有笔记

C++14 : 
    父子类中的 相同原型的普通函数  （隐藏关系）
    父子类中的 相同原型的虚函数     （覆盖关系）

   多态需要具备的条件:
   (1) 基类必须有虚函数，子类必须提供覆盖版本
   (2) 必须利用  基类类型指针(必须指向子类对象) 调用 虚函数
        必须利用  基类类型引用(必须引用子类对象) 调用 虚函数
   
   多态结果：
       最终调用的为  子类的覆盖版本虚函数, 而非基类原始版本虚函数

c++15：
   将基类的析构函数 定义为 虚函数 只是解决一个问题：
            当delete 一个基类类型指针（指向子对象）能够正确的调用子类的析构函数


main出错前的几百行代码 A() is invoked      d
hum出错前的几百行代码 A() is invoked       c
bar出错前的几百行代码 A() is invoked         b
foo出错前的几百行代码 A() is invoked         a
~A() is invoked                             ~a
~A() is invoked                             ~b
~A() is invoked                             ~c
~A() is invoked                             ~d

c++16 : 
  抛出异常的目的：将错误信息 报告给 调用者(别人)

  如果程序中 没有捕获异常的代码， 异常一旦抛出，将直接交给操作系统，系统将我们进程杀死。
  
  如果程序中 有捕获异常的代码, 异常一旦抛出, 层层退出右花括号，直到异常被捕获为止，程序回归正常流程.


main出错前的几百行代码 A() is invoked     d
hum出错前的几百行代码 A() is invoked      c
bar出错前的几百行代码 A() is invoked        b
foo出错前的几百行代码 A() is invoked        a
~A() is invoked                                        ~a
bar中捕获异常信息: -1
bar出错后的几百行代码*************************************回归正常流程**********************
~A() is invoked                                       ~b
hum出错后的几百行代码
~A() is invoked                                       ~c
main出错后的几百行代码                         
~A() is invoked                                       ~b


main出错前的几百行代码 A() is invoked    d
hum出错前的几百行代码 A() is invoked     c
bar出错前的几百行代码 A() is invoked       b
foo出错前的几百行代码 A() is invoked       a
~A() is invoked                                       ~a
~A() is invoked                                       ~b
~A() is invoked                                       ~c
main中捕获异常信息: -1
main出错后的几百行代码**********************************回归正常流程****************************
~A() is invoked                                     ~d

C++17 : 

    任何 基本类型的数据 都可以 隐式转换( 编译器帮我们转换 ) 为布尔类型
    任何 复合类型的数据(类对象) 如何转换为布尔类型？   答：利用类型转换操作符函数

   在C++程序中经常出现将  类对象 放在bool上下文中（例如：利用类对象给bool变量初始化，利用类对象给bool变量赋值，if语句判定条件
                                                                                      while循环的判定条件，for循环第二个判定条件，逻辑反）

 class A { ..... }；

  A a; 
  bool b = a; // 初始化
  bool c;
  c = a; // 赋值
  if( a )  / while( a ) / for( ...; a ; ...)    /   ! a
  一旦出现上述这些情况, 那么编译器会将 类对象 转换为bool类型
  
  
  C++标准库中 封装的   流对象( 例如: cout/cin....... ), 
  允许我们程序员 将 其放在bool上下文中，来 实时判断IO操作(例如：打开文件，写文件，读文件)是否成功。


  流缓冲区：是流对象维护的缓冲区

//模拟C++标准库中ifstream类的实现( 仅仅是模拟，和C++标准库真正的实现可能不一样, 但是道理一样的 )
class ifstream {
public:
     ifstream( const char* filename, ... ) {
          m_f = open( filename, ...);
          if( m_f == -1 )
               m_state = ios::failbit; // 4
          else
               m_state = ios::goodbit; // 0
     }
     operator bool( ) {       return m_state==0 ;     }
     bool good( ) {   return m_state==0;   }
     bool bad() {  return m_state & 1;  }
     bool eof() {   return m_state & 2;  }
     bool fail() {   return m_state & 4; }
     int rdstate( ) {   return  m_state;  }
     void clear()  {   m_state = ios::goodbit // 0;  }
     ifstream& operator<<(int/double/float/char*/string....  data ) { // 一个代表 很多的operator<<函数
            if( m_state != 0 )
                   return *this;
            int ret = read(m_f,....);
            if( ret == -1 )
                   m_state = ios::failbit; // 4
            else
                  m_state = ios::goodbit; // 0
            return *this;
     }
private:
      int m_f; // 保存文件描述符
      int m_state; // 保存 状态值****************************************************
};
// 以上代码模拟类的设计者
// ------------------------------
// 以下代码模拟用户
int main( ) {
      ifstream ifs2("./file.txt", ios::ate );
      if( !ifs2 )  // ! ifs2.operator bool( )
          PrintError( __FILE__, __LINE__, "ifs2流对象状态错误:打开文件失败" );
      int ii; double dd;  string ss1, ss2;
      ifs2 >> ii >> dd >> ss1 >> ss2; // ifs2.operator<<(ii).operator<<(dd).operator<<(ss1).operator<<(ss2);
      if( !ifs2 )  // ! ifs2.operator bool( )
          PrintError( __FILE__, __LINE__, "ifs2流对象状态错误:读文件失败" );
}


C++18 : 

只有两种情况可以自动推导const :
      const int b=10;

     (1). 如果初始化的数据的类型为常指针,则可以自动推导const
      auto g = &b;       // auto: const int*      g: const int*

     (2). 如果指明按引用推导,并且目标带有常属性,则可以自动推导const
     auto& e = b;
     // auto: const int      e: const int&

c++19 ：
  Human h{25,"关羽"};   // 定义h,利用h.Human(25,"关羽")
 
  Human{22,"赵云"}; // 定义 匿名Human类对象,利用 匿名Human类对象.Human(22,"赵云")

  new Human{20，"张飞"}; // 定义 Human类堆对象， 利用 Human类堆对象.Human(20,"张飞")


























